FrameworksTestingShell
  |
  |-> PDLUIToolBox

FrameworksTestingShellTests
  |
  |-> FrameworksTestingShell



PDLUIToolBox

PDLUIToolBoxTests
  |
  |-> PDLUIToolBox
  |-> PDLTestBench



PDLTestBench
  |
  |-> PDLToolBox

PDLTestBenchTests
  |
  |-> PDLTestBench



PDLToolBox

PDLToolBoxTests
|
|-> PDLToolBox





Testing:
• Fake objects actually have working implementations, but usually take some shortcut which makes them not suitable for production. A good example of this is the in-memory database.
• Stubs provide canned answers to calls made during the test, usually not responding at all to anything outside what’s programmed in for the test.
• Spies are stubs that also record some information based on how they were called. One form of this might be an email service that records how many messages it was sent.
• Mocks are pre-programmed with expectations which form a specification of the calls they are expected to receive. They can throw an exception if they receive a call they don’t expect and are checked during verification to ensure they got all the calls they were expecting.


Tool Box

  Core Data
    not sure yet

  General Alerts
    Alert - old UIAlert functionality
    AlertSingle - title with configurations and handler
    AlertDouble - two titles with configurations and handlers

  Navigation Stack Utilities
    traverse navigation stack with handler

  View Controller Utilities
    locate front view controller
    traverse view controller family with handler

  View Hierarchy Utilities
    traverse view hierarchy with handler

  Image Utilities
    blank image creation
    image comparison

  Other Stuff
    Alpha filter
    Stack
    Queue


Event Logging

  setLoggingDestination("file")
  enableForLabel("label", whenConditionOccurs: {})
  disableForLabel("label")


Test Bench

  Mock

    setReturnValueFor("method")
    getReturnValueFor("method")
    resetReturnValueFor("method")
    resetAllReturnValues()

  Spy

    recordCallFor("method")
    getCallCountFor("method")
    getCallHistoryFor("method")
    resetCallHistoryFor("method")
    resetAllCallHistories()

  Core Data

    not sure yet




public extension UIWindow {
    public var visibleViewController: UIViewController? {
        return UIWindow.getVisibleViewControllerFrom(self.rootViewController)
    }

    public static func getVisibleViewControllerFrom(vc: UIViewController?) -> UIViewController? {
        if let nc = vc as? UINavigationController {
            return UIWindow.getVisibleViewControllerFrom(nc.visibleViewController)
        } else if let tc = vc as? UITabBarController {
            return UIWindow.getVisibleViewControllerFrom(tc.selectedViewController)
        } else {
            if let pvc = vc?.presentedViewController {
                return UIWindow.getVisibleViewControllerFrom(pvc)
            } else {
                return vc
            }
        }
    }
}



